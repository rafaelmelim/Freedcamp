/*
  # Add Task Attachments Support

  1. New Tables
    - `task_attachments`
      - `id` (bigint, primary key)
      - `task_id` (bigint, references tasks)
      - `file_name` (text)
      - `file_url` (text)
      - `file_size` (bigint)
      - `file_type` (text)
      - `owner_id` (uuid, references profiles)
      - `created_at` (timestamptz)
      - `updated_at` (timestamptz)

  2. Security
    - Enable RLS on `task_attachments` table
    - Add policies for authenticated users to manage attachments for their tasks
    - Ensure users can only access attachments for tasks in projects they own

  3. Storage
    - Create storage bucket for task attachments
    - Add RLS policies for storage bucket access
*/

-- Create task_attachments table
CREATE TABLE IF NOT EXISTS task_attachments (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  task_id bigint NOT NULL REFERENCES tasks(id) ON DELETE CASCADE,
  file_name text NOT NULL,
  file_url text NOT NULL,
  file_size bigint NOT NULL,
  file_type text NOT NULL,
  owner_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Add index for better performance
CREATE INDEX IF NOT EXISTS idx_task_attachments_task_id ON task_attachments(task_id);
CREATE INDEX IF NOT EXISTS idx_task_attachments_owner_id ON task_attachments(owner_id);

-- Enable RLS
ALTER TABLE task_attachments ENABLE ROW LEVEL SECURITY;

-- Create policies for task_attachments
CREATE POLICY "Users can view attachments for tasks in their projects"
  ON task_attachments
  FOR SELECT
  TO authenticated
  USING (
    task_id IN (
      SELECT tasks.id
      FROM tasks
      JOIN projects ON tasks.project_id = projects.id
      WHERE projects.owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert attachments for tasks in their projects"
  ON task_attachments
  FOR INSERT
  TO authenticated
  WITH CHECK (
    owner_id = auth.uid() AND
    task_id IN (
      SELECT tasks.id
      FROM tasks
      JOIN projects ON tasks.project_id = projects.id
      WHERE projects.owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can update their own attachments"
  ON task_attachments
  FOR UPDATE
  TO authenticated
  USING (owner_id = auth.uid())
  WITH CHECK (owner_id = auth.uid());

CREATE POLICY "Users can delete their own attachments"
  ON task_attachments
  FOR DELETE
  TO authenticated
  USING (owner_id = auth.uid());

-- Create trigger for updating updated_at
CREATE TRIGGER update_task_attachments_updated_at
  BEFORE UPDATE ON task_attachments
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Create storage bucket for task attachments
INSERT INTO storage.buckets (id, name, public)
VALUES ('task-attachments', 'task-attachments', false)
ON CONFLICT (id) DO NOTHING;

-- Storage RLS policies
CREATE POLICY "Users can view files for tasks in their projects"
  ON storage.objects
  FOR SELECT
  TO authenticated
  USING (
    bucket_id = 'task-attachments' AND
    (storage.foldername(name))[1] IN (
      SELECT tasks.id::text
      FROM tasks
      JOIN projects ON tasks.project_id = projects.id
      WHERE projects.owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can upload files for tasks in their projects"
  ON storage.objects
  FOR INSERT
  TO authenticated
  WITH CHECK (
    bucket_id = 'task-attachments' AND
    (storage.foldername(name))[1] IN (
      SELECT tasks.id::text
      FROM tasks
      JOIN projects ON tasks.project_id = projects.id
      WHERE projects.owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can update files for tasks in their projects"
  ON storage.objects
  FOR UPDATE
  TO authenticated
  USING (
    bucket_id = 'task-attachments' AND
    (storage.foldername(name))[1] IN (
      SELECT tasks.id::text
      FROM tasks
      JOIN projects ON tasks.project_id = projects.id
      WHERE projects.owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete files for tasks in their projects"
  ON storage.objects
  FOR DELETE
  TO authenticated
  USING (
    bucket_id = 'task-attachments' AND
    (storage.foldername(name))[1] IN (
      SELECT tasks.id::text
      FROM tasks
      JOIN projects ON tasks.project_id = projects.id
      WHERE projects.owner_id = auth.uid()
    )
  );